# -*- coding: utf-8 -*-
import asyncio
import datetime
import webbrowser

import flet as ft
from loguru import logger

from docs.app import run_quart, program_version, date_of_program_change
from system.account_actions.TGAccountBIO import AccountBIO
from system.account_actions.TGConnect import TGConnect
from system.account_actions.TGContact import TGContact
from system.account_actions.TGCreating import CreatingGroupsAndChats
from system.account_actions.TGInviting import InvitingToAGroup
from system.account_actions.TGInvitingScheduler import (launching_an_invite_once_an_hour,
                                                        launching_invite_every_day_certain_time, schedule_invite)
from system.account_actions.TGParsing import ParsingGroupMembers
from system.account_actions.TGReactions import WorkingWithReactions
from system.account_actions.TGSendingMessages import SendTelegramMessages
from system.account_actions.TGSubUnsub import SubscribeUnsubscribeTelegram
from system.auxiliary_functions.auxiliary_functions import find_files, find_folders
from system.auxiliary_functions.global_variables import ConfigReader
from system.menu_gui.menu_gui import (line_width, inviting_menu, working_with_contacts_menu, message_distribution_menu,
                                      bio_editing_menu, settings_menu, menu_parsing, reactions_menu,
                                      subscribe_and_unsubscribe_menu)
from system.setting.setting import SettingPage, get_unique_filename, reaction_gui
from system.sqlite_working_tools.sqlite_working_tools import DatabaseHandler

logger.add("user_settings/log/log.log", rotation="2 MB", compression="zip")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã


async def log_and_execute_with_args(task_name, execute_method, *args, **kwargs):
    start = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
    logger.info(f'–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {start}')
    logger.info(f"‚ñ∂Ô∏è {task_name} –Ω–∞—á–∞–ª—Å—è")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    await execute_method(*args, **kwargs)

    logger.info(f"üîö {task_name} –∑–∞–≤–µ—Ä—à–µ–Ω")
    finish = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
    logger.info(f'–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {finish}')
    logger.info(f'–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {finish - start}')  # –≤—ã—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è


async def log_and_parse(task_name, parse_method, page=None):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    start = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
    logger.info(f'–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {start}')
    logger.info(f"‚ñ∂Ô∏è {task_name} –Ω–∞—á–∞–ª—Å—è")

    if page:
        await parse_method(page)
    else:
        await parse_method()

    logger.info(f"üîö {task_name} –∑–∞–≤–µ—Ä—à–µ–Ω")
    finish = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
    logger.info(f'–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {finish}')
    logger.info(f'–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {finish - start}')  # –≤—ã—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è


async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä Quart –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    quart_task = asyncio.create_task(run_quart())

    page = ft.Page()  # –∫–æ–¥ Flet
    telegram_master_main(page)

    await quart_task  # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å–µ—Ä–≤–µ—Ä–∞ Quart


def setup_page(page, program_version, date_of_program_change, line_width):
    page.title = f"TelegramMaster: {program_version} (–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è {date_of_program_change})"
    page.window.width = line_width
    page.window.height = 550
    page.window.resizable = False
    logger.info(f"Program version: {program_version}. Date of change: {date_of_program_change}")


def telegram_master_main(page: ft.Page):
    setup_page(page, program_version, date_of_program_change, line_width)

    async def route_change(route):
        page.views.clear()
        # –ú–µ–Ω—é "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        page.views.append(
            ft.View("/", [ft.AppBar(title=ft.Text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                                    bgcolor=ft.colors.SURFACE_VARIANT),
                          ft.Text(spans=[ft.TextSpan(
                              "TelegramMaster 2.0",
                              ft.TextStyle(
                                  size=40,
                                  weight=ft.FontWeight.BOLD,
                                  foreground=ft.Paint(
                                      gradient=ft.PaintLinearGradient((0, 20), (150, 20), [ft.colors.PINK,
                                                                                           ft.colors.PURPLE])), ), ), ], ),
                          ft.Text(disabled=False,
                                  spans=[ft.TextSpan('–ê–∫–∫–∞—É–Ω—Ç  Telegram: '),
                                         ft.TextSpan("https://t.me/PyAdminRU",
                                                     ft.TextStyle(decoration=ft.TextDecoration.UNDERLINE),
                                                     url="https://t.me/PyAdminRU", ), ], ),
                          ft.Text(disabled=False,
                                  spans=[ft.TextSpan("–ö–∞–Ω–∞–ª Telegram: "),
                                         ft.TextSpan("https://t.me/master_tg_d",
                                                     ft.TextStyle(decoration=ft.TextDecoration.UNDERLINE),
                                                     url="https://t.me/master_tg_d", ), ], ),
                          ft.Column([  # –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã –∏ –∫–Ω–æ–ø–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (page) –≤ –≤–∏–¥–µ –∫–æ–ª–æ–Ω–æ–∫.
                              ft.Row([ft.ElevatedButton(width=270, height=30, text="–ò–Ω–≤–∞–π—Ç–∏–Ω–≥",
                                                        on_click=lambda _: page.go("/inviting")),
                                      ft.ElevatedButton(width=270, height=30, text="–ü–∞—Ä—Å–∏–Ω–≥",
                                                        on_click=lambda _: page.go("/parsing")), ]),
                              ft.Row([ft.ElevatedButton(width=270, height=30, text="–†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏",
                                                        on_click=lambda _: page.go("/working_with_contacts")),
                                      ft.ElevatedButton(width=270, height=30, text="–ü–æ–¥–ø–∏—Å–∫–∞, –æ—Ç–ø–∏—Å–∫–∞",
                                                        on_click=lambda _: page.go("/subscribe_unsubscribe")), ]),
                              ft.Row([ft.ElevatedButton(width=270, height=30, text="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                                                        on_click=lambda _: page.go("/connecting_accounts")),
                                      ft.ElevatedButton(width=270, height=30, text="–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π",
                                                        on_click=lambda _: page.go("/sending_messages")), ]),
                              ft.Row([ft.ElevatedButton(width=270, height=30, text="–†–∞–±–æ—Ç–∞ —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏",
                                                        on_click=lambda _: page.go("/working_with_reactions")),
                                      ft.ElevatedButton(width=270, height=30, text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                                                        on_click=lambda _: page.go("/checking_accounts")), ]),
                              ft.Row([ft.ElevatedButton(width=270, height=30, text="–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø (—á–∞—Ç–æ–≤)",
                                                        on_click=lambda _: page.go("/creating_groups")),
                                      ft.ElevatedButton(width=270, height=30, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ_BIO",
                                                        on_click=lambda _: page.go("/bio_editing")), ]),
                              ft.ElevatedButton(width=line_width, height=30, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                                                on_click=lambda _: page.go("/settings")),
                              ft.ElevatedButton(width=line_width, height=30, text="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
                                                on_click=lambda _: page.go("/documentation")),
                          ]), ]))
        if page.route == "/inviting":  # –ú–µ–Ω—é "–ò–Ω–≤–∞–π—Ç–∏–Ω–≥"
            await inviting_menu(page)
        elif page.route == "/inviting_without_limits":  # –ò–Ω–≤–∞–π—Ç–∏–Ω–≥
            await log_and_execute_with_args(
                "–ò–Ω–≤–∞–π—Ç–∏–Ω–≥", InvitingToAGroup().inviting_without_limits, account_limits=ConfigReader().get_limits())
        elif page.route == "/inviting_1_time_per_hour":
            await log_and_parse("–ò–Ω–≤–∞–π—Ç–∏–Ω–≥ 1 —Ä–∞–∑ –≤ —á–∞—Å", launching_an_invite_once_an_hour)
        elif page.route == "/inviting_certain_time":
            await log_and_parse("–ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è", schedule_invite)
        elif page.route == "/inviting_every_day":
            await log_and_parse("–ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å", launching_invite_every_day_certain_time)
        elif page.route == "/checking_accounts":  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤

            start = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
            logger.info('–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: ' + str(start))
            logger.info("‚ñ∂Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞—á–∞–ª–∞—Å—å")

            await TGConnect().verify_all_accounts(account_directory="user_settings/accounts",
                                                  extension="session")  # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            folders = find_folders(directory_path="user_settings/accounts")
            for folder in folders:
                logger.info(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ üìÅ {folder} —á–µ—Ä–µ–∑ —Å–ø–∞–º –±–æ—Ç')
                if folder == "invalid_account":
                    logger.info(f"‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫—É üìÅ: {folder}")
                    continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª, –ø—Ä–æ–ø—É—Å–∫–∞—è —ç—Ç—É –∏—Ç–µ—Ä–∞—Ü–∏—é
                else:
                    await TGConnect().verify_all_accounts(account_directory=f"user_settings/accounts/{folder}",
                                                          extension="session")
                    await TGConnect().check_for_spam(folder)
            logger.info("üîö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            finish = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
            logger.info('–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: ' + str(finish))
            logger.info('–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ' + str(finish - start))  # –≤—ã—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è

        elif page.route == "/subscribe_unsubscribe":  # –ú–µ–Ω—é "–ü–æ–¥–ø–∏—Å–∫–∞ –∏ –æ—Ç–ø–∏—Å–∫–∞"
            await subscribe_and_unsubscribe_menu(page)
        elif page.route == "/subscription_all":
            await log_and_parse("–ü–æ–¥–ø–∏—Å–∫–∞", SubscribeUnsubscribeTelegram().subscribe_telegram)
        elif page.route == "/unsubscribe_all":
            await log_and_parse("–û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è", SubscribeUnsubscribeTelegram().unsubscribe_all)
        elif page.route == "/working_with_reactions":  # –ú–µ–Ω—é "–†–∞–±–æ—Ç–∞ —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏"
            await reactions_menu(page)
        elif page.route == "/setting_reactions":
            await log_and_parse("–°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏–∏", WorkingWithReactions().send_reaction_request, page)
        elif page.route == "/we_are_winding_up_post_views":
            await log_and_parse("–ù–∞–∫—Ä—É—á–∏–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ—Å—Ç–æ–≤", WorkingWithReactions().viewing_posts)
        elif page.route == "/automatic_setting_of_reactions":
            await log_and_parse("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π", WorkingWithReactions().setting_reactions)
        elif page.route == "/parsing":  # –ú–µ–Ω—é "–ü–∞—Ä—Å–∏–Ω–≥"
            await menu_parsing(page)
        elif page.route == "/parsing_single_groups":

            await log_and_parse("–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã / –≥—Ä—É–ø–ø", ParsingGroupMembers().parse_groups)

        elif page.route == "/parsing_selected_group_user_subscribed":
            await log_and_parse("–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã", ParsingGroupMembers().choose_and_parse_group, page)
        elif page.route == "/parsing_active_group_members":
            await log_and_parse("–ü–∞—Ä—Å–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã",
                                ParsingGroupMembers().entering_data_for_parsing_active, page)
        elif page.route == "/parsing_groups_channels_account_subscribed":
            await log_and_parse("–ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø / –∫–∞–Ω–∞–ª–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞", ParsingGroupMembers().parse_subscribed_groups)
        elif page.route == "/clearing_list_previously_saved_data":
            await log_and_parse("–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç —Ä–∞–Ω–µ–µ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", DatabaseHandler().cleaning_db, "members")
        elif page.route == "/working_with_contacts":  # –ú–µ–Ω—é "–†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"
            await working_with_contacts_menu(page)
        elif page.route == "/creating_contact_list":  # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            await DatabaseHandler().open_and_read_data("contact")  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
            SettingPage().output_the_input_field(page, "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤", "contact",
                                                 "contact", "/working_with_contacts", "contact")
        elif page.route == "/show_list_contacts":
            await log_and_parse("–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", TGContact().show_account_contact_list)
        elif page.route == "/deleting_contacts":
            await log_and_parse("–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", TGContact().delete_contact)
        elif page.route == "/adding_contacts":
            await log_and_parse("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", TGContact().inviting_contact)
        elif page.route == "/connecting_accounts":
            await log_and_parse("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –º–µ—Ç–æ–¥–æ–º –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                                TGConnect().start_telegram_session, page)
        elif page.route == "/creating_groups":
            await log_and_parse("–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø (—á–∞—Ç–æ–≤)", CreatingGroupsAndChats().creating_groups_and_chats)
        elif page.route == "/sending_messages":  # –ú–µ–Ω—é "–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"
            await message_distribution_menu(page)
        elif page.route == "/sending_messages_via_chats":  # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Ç–∞–º
            entities = find_files(directory_path="user_settings/message", extension="json")
            logger.info(entities)
            await SendTelegramMessages().sending_messages_via_chats_times()
        elif page.route == "/sending_messages_via_chats_with_answering_machine":
            await log_and_parse("–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Ç–∞–º —Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º",
                                SendTelegramMessages().answering_machine)
        elif page.route == "/sending_files_via_chats":
            await log_and_parse("–†–∞—Å—Å—ã–ª–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ —á–∞—Ç–∞–º", SendTelegramMessages().sending_files_via_chats)
        elif page.route == "/sending_messages_files_via_chats":
            await log_and_parse("–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π + —Ñ–∞–π–ª–æ–≤ –ø–æ —á–∞—Ç–∞–º",
                                SendTelegramMessages().sending_messages_files_via_chats)

        elif page.route == "/sending_personal_messages_with_limits":  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–∫—É (—Å –ª–∏–º–∏—Ç–∞–º–∏)
            await SendTelegramMessages().send_message_from_all_accounts(account_limits=ConfigReader().get_limits())

        elif page.route == "/sending_files_to_personal_account_with_limits":  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ª–∏—á–∫—É (—Å –ª–∏–º–∏—Ç–∞–º–∏)
            await SendTelegramMessages().send_files_to_personal_chats(account_limits=ConfigReader().get_limits())
        elif page.route == "/bio_editing":  # –ú–µ–Ω—é "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ_BIO"
            await bio_editing_menu(page)
        elif page.route == "/edit_description":
            await log_and_parse("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è", AccountBIO().change_bio_profile_gui, page)
        elif page.route == "/name_change":
            await log_and_parse("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏", AccountBIO().change_name_profile_gui, page)
        elif page.route == "/change_surname":
            await log_and_parse("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏", AccountBIO().change_last_name_profile_gui, page)
        elif page.route == "/edit_photo":
            await log_and_parse("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ", AccountBIO().change_photo_profile)
        elif page.route == "/changing_username":
            await log_and_parse("–ò–∑–º–µ–Ω–µ–Ω–∏–µ username", AccountBIO().change_username_profile_gui, page)
        elif page.route == "/settings":  # –ú–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ TelegramMaster"
            await settings_menu(page)
        elif page.route == "/recording_api_id_api_hash":
            await log_and_parse("–ó–∞–ø–∏—Å—å api_id, api_hash", SettingPage().writing_api_id_api_hash, page)
        elif page.route == "/message_limits":  # –õ–∏–º–∏—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            SettingPage().record_setting(page, "message_limits", "–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
        elif page.route == "/account_limits":  # –õ–∏–º–∏—Ç—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
            SettingPage().record_setting(page, "account_limits", "–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç")
        elif page.route == "/creating_username_list":  # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ username
            SettingPage().output_the_input_field(page, "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ username", "members",
                                                 "username, id, access_hash, first_name, last_name, "
                                                 "user_phone, online_at, photos_id, user_premium",
                                                 "/settings", "members (username)")
        elif page.route == "/forming_list_of_chats_channels":  # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ / –∫–∞–Ω–∞–ª–æ–≤
            SettingPage().output_the_input_field(page, "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≥—Ä—É–ø–ø—ã", "writing_group_links",
                                                 "writing_group_links", "/settings", "writing_group_links")
        elif page.route == "/link_entry":  # –ó–∞–ø–∏—Å—å —Å—Å—ã–ª–∫–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
            await DatabaseHandler().cleaning_db("links_inviting")  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏
            SettingPage().output_the_input_field(page, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞", "links_inviting",
                                                 "links_inviting", "/settings", "links_inviting")
        elif page.route == "/proxy_entry":
            await log_and_parse("–ó–∞–ø–∏—Å—å proxy",
                                SettingPage().creating_the_main_window_for_proxy_data_entry, page)
        elif page.route == "/message_recording":  # –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π

            SettingPage().recording_text_for_sending_messages(page, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è",
                                                              get_unique_filename(
                                                                  base_filename='user_settings/message/message'))

        elif page.route == "/recording_reaction_link":  # –ó–∞–ø–∏—Å—å —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π
            SettingPage().recording_text_for_sending_messages(page, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
                                                              'user_settings/reactions/link_channel.json')
        elif page.route == "/choice_of_reactions":
            await log_and_parse("–í—ã–±–æ—Ä —Ä–µ–∞–∫—Ü–∏–π", reaction_gui, page)
        elif page.route == "/recording_the_time_between_messages":  # –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            SettingPage().create_main_window(page, variable="time_sending_messages")
        elif page.route == "/time_between_invites_sending_messages":  # –í—Ä–µ–º—è –º–µ–∂–¥—É –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–æ–º, —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            SettingPage().create_main_window(page, variable="time_inviting")
        elif page.route == "/changing_accounts":  # –°–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            SettingPage().create_main_window(page, variable="time_changing_accounts")
        elif page.route == "/time_between_subscriptions":  # TODO –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            await log_and_parse("–ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏", SettingPage().recording_the_time_to_launch_an_invite_every_day, page)
        elif page.route == "/time_between_subscriptionss":  # –í—Ä–µ–º—è –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–æ–π
            SettingPage().create_main_window(page, variable="time_subscription")
        elif page.route == "/documentation":  # –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            webbrowser.open_new("http://127.0.0.1:8000")
            await run_quart()

        page.update()

    def view_pop(view):
        page.views.pop()
        top_view = page.views[-1]
        page.go(top_view.route)

    page.on_route_change = route_change
    page.on_view_pop = view_pop
    page.go(page.route)


ft.app(target=telegram_master_main)

if __name__ == "__main__":
    asyncio.run(main())
