# -*- coding: utf-8 -*-
import datetime
import json
from urllib.request import urlopen  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å urllib2 –Ω–∞ urllib.request

import flet as ft  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É flet
import requests
from telethon import TelegramClient
from telethon.errors import FilePartsInvalidError

from src.core.configs import DATE_OF_PROGRAM_CHANGE, PROGRAM_NAME, PROGRAM_VERSION
from src.gui.gui import AppLogger


class SendLog:

    def __init__(self, page: ft.Page):
        self.page = page
        self.app_logger = AppLogger(page)

    def get_country_flag(self, ip_address):
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ ip –∞–¥—Ä–µ—Å—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–∏—Å–∞ https://ipwhois.io/ru/documentation.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–ª–∞–≥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã.
        :param ip_address: IP –∞–¥—Ä–µ—Å
        :return: —Ñ–ª–∞–≥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
        """
        try:
            ipwhois = json.load(urlopen(f'https://ipwho.is/{ip_address}'))
            return ipwhois['flag']['emoji'], ipwhois['country']
        except KeyError:
            return "üè≥Ô∏è", "üåç"

    def get_external_ip(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ ip –∞–¥—Ä–µ—Å–∞"""
        try:
            response = requests.get('https://httpbin.org/ip')
            response.raise_for_status()
            return response.json().get("origin")
        except requests.RequestException as _:
            return None

    async def loging(self):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ TelegramMaster 2.0
        """
        local_ip = self.get_external_ip()
        emoji, country = self.get_country_flag(local_ip)
        bot_token = '8452256961:AAHwa8tRMoe1SGPuFtpIFGXvShBQcRoUyKU'
        client = TelegramClient('src/features/auth/log',
                                api_id=7655060,
                                api_hash="cc1290cd733c1f1d407598e5a31be4a8")
        await client.start(bot_token=bot_token)
        # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üöÄ **Launch Information**\n\n"

            f"Program name: `{PROGRAM_NAME}`\n"
            f"üåç IP Address: `{local_ip}`\n"
            f"üìç Location: {country} {emoji}\n"
            f"üïí Date: `{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}`\n"
            f"üîß Program Version: `{PROGRAM_VERSION}`\n"
            f"üìÖ Date of Change: `{DATE_OF_PROGRAM_CHANGE}`"
        )
        try:
            await client.send_file(535185511, 'user_data/log/log_ERROR.log', caption=message)
            client.disconnect()
        except FilePartsInvalidError as error:
            await self.app_logger.log_and_display(f"{error}")
            client.disconnect()
