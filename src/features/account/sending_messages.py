# -*- coding: utf-8 -*-
import asyncio
import random
import sys

import flet as ft
from loguru import logger
from telethon import events
from telethon.errors import (ChannelPrivateError, ChatAdminRequiredError, ChatWriteForbiddenError, FloodWaitError,
                             PeerFloodError, SlowModeWaitError, UserBannedInChannelError, UserIdInvalidError,
                             UsernameInvalidError, UsernameNotOccupiedError, UserNotMutualContactError)

from src.core.configs import (BUTTON_HEIGHT, ConfigReader, WIDTH_WIDE_BUTTON, path_accounts_folder,
                              path_folder_with_messages, PATH_SEND_MESSAGE_FOLDER_ANSWERING_MACHINE,
                              path_send_message_folder_answering_machine_message, TIME_SENDING_MESSAGES_1,
                              time_sending_messages_2, time_subscription_1, time_subscription_2)
from src.core.sqlite_working_tools import select_records_with_limit, open_and_read_data
from src.core.utils import Utils
from src.features.account.connect import TGConnect
from src.features.account.parsing.gui_elements import GUIProgram
from src.features.account.subscribe_unsubscribe.subscribe_unsubscribe import SubscribeUnsubscribeTelegram
from src.gui.gui import list_view, AppLogger
from src.locales.translations_loader import translations


class SendTelegramMessages:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö) —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–∫—É Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """

    def __init__(self, page: ft.Page):
        self.page = page
        self.connect = TGConnect(page)
        self.sub_unsub_tg = SubscribeUnsubscribeTelegram(page)
        self.account_extension = "session"  # –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        self.file_extension = "json"
        self.app_logger = AppLogger(page=page)
        self.utils = Utils(page=page)

    async def send_files_to_personal_chats(self) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ª–∏—á–∫—É
        """

        output = ft.Text("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–∫—É", size=18, weight=ft.FontWeight.BOLD)

        async def button_clicked(_):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" """
            time_from = tb_time_from.value or TIME_SENDING_MESSAGES_1  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—è
            time_to = tb_time_to.value or time_sending_messages_2  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—è

            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–ª—è –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –µ–≥–æ –Ω–∞ —Å–ø–∏—Å–æ–∫ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
            account_limits_input = account_limits_inputs.value  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            if account_limits_input:  # –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                limits = account_limits_input  # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
                await self.app_logger.log_and_display(f"{limits}")
            else:
                limits = ConfigReader().get_limits()
            if time_from < time_to:
                try:
                    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    for session_name in self.utils.find_filess(directory_path=path_accounts_folder,
                                                               extension=self.account_extension):
                        client = await self.connect.get_telegram_client(session_name,
                                                                        account_directory=path_accounts_folder)
                        try:
                            # –û—Ç–∫—Ä—ã–≤–∞–µ–º parsing —Å–ø–∏—Å–æ–∫ user_data/software_database.db –¥–ª—è inviting –≤ –≥—Ä—É–ø–ø—É
                            usernames = select_records_with_limit(limit=int(limits))
                            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —Ä–∞–±–æ—Ç–µ
                            await self.app_logger.log_and_display(f"–í—Å–µ–≥–æ username: {len(usernames)}")
                            for rows in usernames:
                                username = rows[
                                    0]  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö user_data/software_database.db
                                await self.app_logger.log_and_display(f"[!] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {username}")
                                try:
                                    user_to_add = await client.get_input_entity(username)
                                    messages, files = await self.all_find_and_all_files()
                                    await self.send_content(client, user_to_add, messages, files)
                                    await self.app_logger.log_and_display(
                                        f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É {username}. –§–∞–π–ª {files} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}.")
                                    await self.utils.record_inviting_results(time_from, time_to, rows)
                                except FloodWaitError as e:
                                    await self.app_logger.log_and_display(
                                        f"{translations["ru"]["errors"]["flood_wait"]}{e}",
                                        level="error")
                                    await self.utils.record_and_interrupt(time_from, time_to)
                                    break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                                except PeerFloodError:
                                    await self.utils.record_and_interrupt(time_from, time_to)
                                    break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                                except UserNotMutualContactError:
                                    await self.app_logger.log_and_display(
                                        translations["ru"]["errors"]["user_not_mutual_contact"])
                                except (UserIdInvalidError, UsernameNotOccupiedError, ValueError, UsernameInvalidError):
                                    await self.app_logger.log_and_display(
                                        translations["ru"]["errors"]["invalid_username"])
                                except ChatWriteForbiddenError:
                                    await self.app_logger.log_and_display(
                                        translations["ru"]["errors"]["chat_write_forbidden"])
                                    await self.utils.record_and_interrupt(time_from, time_to)
                                    break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                                except (TypeError, UnboundLocalError):
                                    continue  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ software_database.db –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                        except KeyError:
                            sys.exit(1)
                except Exception as error:
                    logger.exception(error)
            else:
                t.value = f"–í—Ä–µ–º—è —Å–Ω–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"
                t.update()
            self.page.update()

        # GUI —ç–ª–µ–º–µ–Ω—Ç—ã

        tb_time_from, tb_time_to = await self.sleep_selection_input()
        sleep_time_group = ft.Row(controls=[tb_time_from, tb_time_to], spacing=20, )
        # –ü–æ–ª–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
        account_limits_inputs = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è", multiline=True, max_lines=12)

        # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
        button_done = ft.ElevatedButton(text=translations["ru"]["buttons"]["done"], width=WIDTH_WIDE_BUTTON,
                                        height=BUTTON_HEIGHT,
                                        on_click=button_clicked, )

        t = ft.Text()
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω—é—é –∏ –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç–∏
        self.page.views.append(
            ft.View("/sending_messages_via_chats_menu",
                    controls=[
                        await GUIProgram().key_app_bar(),  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                        output, sleep_time_group, t, account_limits_inputs,
                        ft.Column(  # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å: –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                            controls=[
                                button_done,
                            ],
                        ), ], ))

    @staticmethod
    async def sleep_selection_input():
        # –ì—Ä—É–ø–ø–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞
        tb_time_from = ft.TextField(label="–í—Ä–µ–º—è —Å–Ω–∞ –æ—Ç", width=297, hint_text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è", border_radius=5, )
        tb_time_to = ft.TextField(label="–í—Ä–µ–º—è —Å–Ω–∞ –¥–æ", width=297, hint_text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è", border_radius=5, )
        return tb_time_from, tb_time_to

    async def performing_the_operation(self, checs, chat_list_fields) -> None:
        """
        –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Ç–∞–º
        :param chat_list_fields: —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≥—Ä—É–ø–ø—ã
        :param checs: –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞
        """
        # –°–æ–∑–¥–∞–µ–º ListView –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤
        self.page.views.clear()
        self.page.update()
        self.page.controls.append(list_view)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        button_back = ft.ElevatedButton(text=translations["ru"]["buttons"]["back"], width=WIDTH_WIDE_BUTTON,
                                        height=BUTTON_HEIGHT,
                                        on_click=lambda _: self.page.go("/sending_messages_via_chats_menu"))
        # –°–æ–∑–¥–∞–Ω–∏–µ View —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        self.page.views.append(
            ft.View(
                "/sending_messages_via_chats_menu",
                controls=[
                    list_view,  # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ üìù
                    ft.Column(
                        controls=[button_back]
                    )]))

        if checs == True:
            try:
                for session_name in self.utils.find_filess(directory_path=PATH_SEND_MESSAGE_FOLDER_ANSWERING_MACHINE,
                                                           extension=self.account_extension):
                    client = await self.connect.get_telegram_client(session_name,
                                                                    account_directory=PATH_SEND_MESSAGE_FOLDER_ANSWERING_MACHINE)

                    @client.on(events.NewMessage(incoming=True))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    async def handle_private_messages(event):
                        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
                        if event.is_private:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏—á–Ω—ã–º
                            await self.app_logger.log_and_display(f"–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {event.message.message}")
                            entities = self.utils.find_files(
                                directory_path=path_send_message_folder_answering_machine_message,
                                extension=self.file_extension)
                            await self.app_logger.log_and_display(f"{entities}")
                            data = await self.select_and_read_random_file(entities, folder="answering_machine")
                            await self.app_logger.log_and_display(f"{data}")
                            await event.respond(f'{data}')  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.app_logger.log_and_display(f"–í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {len(chat_list_fields)}")
                    self.page.update()
                    for group_link in chat_list_fields:
                        try:
                            await self.sub_unsub_tg.subscribe_to_group_or_channel(client, group_link, self.page)
                            # –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
                            messages, files = await self.all_find_and_all_files()
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–∞–π–ª—ã –≤ –≥—Ä—É–ø–ø—É
                            await self.send_content(client, group_link, messages, files)
                        except UserBannedInChannelError:
                            await self.app_logger.log_and_display(
                                f"–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö (–≤—ã–∑–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–º SendMessageRequest)")
                        except ValueError:
                            await self.app_logger.log_and_display(
                                f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É  –Ω–∞ –≥—Ä—É–ø–ø—É: {group_link}")
                            break
                        await self.random_dream()  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                    await client.run_until_disconnected()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –∂–¥–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            except Exception as error:
                logger.exception(error)
        else:
            try:
                start = await self.app_logger.start_time()
                for session_name in self.utils.find_filess(directory_path=path_accounts_folder,
                                                           extension=self.account_extension):
                    client = await self.connect.get_telegram_client(session_name,
                                                                    account_directory=path_accounts_folder)
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –≥—Ä—É–ø–ø–∞–º–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    await self.app_logger.log_and_display(f"–í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {len(chat_list_fields)}")
                    for group_link in chat_list_fields:  # –ü–æ–æ—á–µ—Ä–µ–¥–Ω–æ –≤—ã–≤–æ–¥–∏–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                        try:
                            await self.sub_unsub_tg.subscribe_to_group_or_channel(client, group_link, self.page)
                            # –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
                            messages, files = await self.all_find_and_all_files()
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–∞–π–ª—ã –≤ –≥—Ä—É–ø–ø—É
                            await self.send_content(client, group_link, messages, files)
                        except ChannelPrivateError:
                            await self.app_logger.log_and_display(
                                f"–ì—Ä—É–ø–ø–∞ {group_link} –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞.")
                        except PeerFloodError:
                            await self.utils.record_and_interrupt(time_subscription_1, time_subscription_2)
                            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                        except FloodWaitError as e:
                            await self.app_logger.log_and_display(f"{translations["ru"]["errors"]["flood_wait"]}{e}",
                                                                  level="error")
                            await asyncio.sleep(e.seconds)
                        except UserBannedInChannelError:
                            await self.utils.record_and_interrupt(time_subscription_1, time_subscription_2)
                            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                        except ChatAdminRequiredError:
                            await self.app_logger.log_and_display(translations["ru"]["errors"]["admin_rights_required"])
                            break
                        except ChatWriteForbiddenError:
                            await self.app_logger.log_and_display(translations["ru"]["errors"]["chat_write_forbidden"])
                            await self.utils.record_and_interrupt(time_subscription_1, time_subscription_2)
                            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                        except SlowModeWaitError as e:
                            await self.app_logger.log_and_display(translations["ru"]["errors"]["slow_mode_wait"])
                            await asyncio.sleep(e.seconds)
                        except ValueError:
                            await self.app_logger.log_and_display(
                                translations["ru"]["errors"]["sending_error_check_link"])
                            break
                        except (TypeError, UnboundLocalError):
                            continue  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ software_database.db –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                        except Exception as error:
                            logger.exception(error)
                    await client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Telegram
                await self.app_logger.log_and_display("üîö –ö–æ–Ω–µ—Ü –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π + —Ñ–∞–π–ª–æ–≤ –ø–æ —á–∞—Ç–∞–º")
                await self.app_logger.end_time(start)
            except Exception as error:
                logger.exception(error)

    async def sending_messages_files_via_chats(self) -> None:
        """
        –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π + —Ñ–∞–π–ª–æ–≤ –ø–æ —á–∞—Ç–∞–º
        """

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
        async def button_clicked(_):
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–ª—è –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –µ–≥–æ –Ω–∞ —Å–ø–∏—Å–æ–∫ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
            chat_list_input = chat_list_field.value.strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            if chat_list_input:  # –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                chat_list_fields = chat_list_input.split()  # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
            else:
                # –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                db_chat_list = await open_and_read_data(table_name="writing_group_links",
                                                        page=self.page)
                chat_list_fields = [group[0] for group in db_chat_list]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –∏–∑ –∫–æ—Ä—Ç–µ–∂–µ–π
            if tb_time_from.value or TIME_SENDING_MESSAGES_1 < tb_time_to.value or time_sending_messages_2:
                await self.performing_the_operation(c.value, chat_list_fields)
            else:
                t.value = f"–í—Ä–µ–º—è —Å–Ω–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"
                t.update()
            self.page.update()

        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º
        c = ft.Checkbox(label="–†–∞–±–æ—Ç–∞ —Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º")
        tb_time_from, tb_time_to = await self.sleep_selection_input()
        # –ü–æ–ª–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
        chat_list_field = ft.TextField(label="–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤", multiline=True, max_lines=12)

        t = ft.Text()
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω—é—é –∏ –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç–∏
        self.page.views.append(
            ft.View(
                "/sending_messages_via_chats_menu",
                controls=[
                    await GUIProgram().key_app_bar(),  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                    ft.Text(translations["ru"]["message_sending_menu"]["sending_messages_files_via_chats"], size=18,
                            weight=ft.FontWeight.BOLD), c, ft.Row(controls=[tb_time_from, tb_time_to], spacing=20, ), t,
                    chat_list_field,
                    ft.Column(  # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å: –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                        controls=[
                            ft.ElevatedButton(text=translations["ru"]["buttons"]["done"], width=WIDTH_WIDE_BUTTON,
                                              height=BUTTON_HEIGHT,
                                              on_click=button_clicked, ),
                        ],
                    ), ], ))

    async def send_content(self, client, target, messages, files):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–∞–π–ª—ã –≤ –ª–∏—á–∫—É.
        :param client: –¢–µ–ª–µ–≥—Ä–∞–º –∫–ª–∏–µ–Ω—Ç
        :param target: –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É (–∏–ª–∏ –ª–∏—á–∫—É)
        :param messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        :param files: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        """
        await self.app_logger.log_and_display(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {target}")
        if not messages:
            for file in files:
                await client.send_file(target, f"user_data/files_to_send/{file}")
                await self.app_logger.log_and_display(f"–§–∞–π–ª {file} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {target}.")
        else:
            message = await self.select_and_read_random_file(messages, folder="message")
            if not files:
                await client.send_message(entity=target, message=message)
            else:
                for file in files:
                    await client.send_file(target, f"user_data/files_to_send/{file}", caption=message)
                    await self.app_logger.log_and_display(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {target}")
        await self.random_dream()

    async def all_find_and_all_files(self):
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
        """
        messages = self.utils.find_files(directory_path=path_folder_with_messages, extension=self.file_extension)
        files = self.utils.all_find_files(directory_path="user_data/files_to_send")
        return messages, files

    async def random_dream(self):
        """
        –†–∞–Ω–¥–æ–º–Ω—ã–π —Å–æ–Ω
        """
        try:
            time_in_seconds = random.randrange(TIME_SENDING_MESSAGES_1, time_sending_messages_2)
            await self.app_logger.log_and_display(f"–°–ø–∏–º {time_in_seconds} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(time_in_seconds)  # –°–ø–∏–º 1 —Å–µ–∫—É–Ω–¥—É
        except Exception as error:
            logger.exception(error)

    async def select_and_read_random_file(self, entities, folder):
        """
        –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è

        :param entities: —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è
        :param folder: –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        """
        try:
            if entities:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
                # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è
                random_file = random.choice(entities)  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
                await self.app_logger.log_and_display(f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è: {random_file[0]}.json")
                data = self.utils.read_json_file(filename=f"user_data/{folder}/{random_file[0]}.json")
            return data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        except Exception as error:
            logger.exception(error)
            return None
