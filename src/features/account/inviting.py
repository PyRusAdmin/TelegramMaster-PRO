# -*- coding: utf-8 -*-
import asyncio
import datetime as dt

import flet as ft  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É flet
from loguru import logger
from scheduler.asyncio import Scheduler
from telethon.errors import (AuthKeyDuplicatedError, ChannelPrivateError, SessionRevokedError, TypeNotFoundError,
                             UserBannedInChannelError, UserChannelsTooMuchError, UserNotMutualContactError,
                             UserKickedError, UserDeactivatedBanError, UsernameInvalidError, UsernameNotOccupiedError,
                             UserIdInvalidError, ChatAdminRequiredError, UserPrivacyRestrictedError,
                             BotGroupsBlockedError, BadRequestError, ChatWriteForbiddenError, InviteRequestSentError,
                             FloodWaitError, AuthKeyUnregisteredError, PeerFloodError)
from telethon.tl.functions.channels import InviteToChannelRequest

from src.core.configs import (BUTTON_HEIGHT, ConfigReader, LIMITS, WIDTH_WIDE_BUTTON, TIME_INVITING_1, TIME_INVITING_2)
from src.core.sqlite_working_tools import (select_records_with_limit, get_links_inviting, save_links_inviting,
                                           getting_account)
from src.core.utils import Utils
from src.features.account.connect import TGConnect
from src.gui.gui_elements import GUIProgram
from src.features.account.parsing.switch_controller import ToggleController
from src.gui.gui_input_builders import TimeInputRowBuilder, LinkInputRowBuilder
from src.features.account.subscribe_unsubscribe.subscribe import Subscribe
from src.features.account.subscribe_unsubscribe.subscribe_unsubscribe import SubscribeUnsubscribeTelegram
from src.features.settings.setting import SettingPage
from src.gui.gui import AppLogger
from src.gui.gui import list_view
from src.gui.notification import show_notification
from src.locales.translations_loader import translations


class InvitingToAGroup:

    def __init__(self, page: ft.Page):
        self.page = page
        self.config_reader = ConfigReader()
        self.hour, self.minutes = self.config_reader.get_hour_minutes_every_day()
        self.scheduler = Scheduler()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.api_id_api_hash = self.config_reader.get_api_id_data_api_hash_data()
        self.api_id = self.api_id_api_hash[0]
        self.api_hash = self.api_id_api_hash[1]
        self.links_inviting = get_links_inviting()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.app_logger = AppLogger(page=page)
        self.connect = TGConnect(page=page)
        self.utils = Utils(page=page)
        self.setting_page = SettingPage(page=page)
        self.subscribe = Subscribe(page=page)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ Subscribe (–ü–æ–¥–ø–∏—Å–∫–∞)
        self.gui_program = GUIProgram()
        self.session_string = getting_account()  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    async def inviting_menu(self):
        """
        –ú–µ–Ω—é –∏–Ω–≤–∞–π—Ç–∏–Ω–≥
        """
        list_view.controls.clear()  # ‚úÖ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
        self.page.controls.append(list_view)  # –î–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        self.page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å ListView üîÑ

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
        await self.app_logger.log_and_display(message=f"–õ–∏–º–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {LIMITS}\n"
                                                      f"–í—Å–µ–≥–æ usernames: {len(select_records_with_limit(limit=None))}\n"
                                                      f"–í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.session_string)}\n")

        async def general_invitation_to_the_group(_):
            """
            –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
            """
            start = await self.app_logger.start_time()
            self.page.update()  # –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üîÑ
            for session_name in self.utils.find_filess(directory_path=path_accounts_folder, extension='session'):

                client = await self.connect.client_connect_string_session(session_name)
                await self.connect.getting_account_data(client)

                await self.subscribe.subscribe_to_group_or_channel(client=client, groups=dropdown.value)
                logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É {dropdown.value} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                await self.app_logger.log_and_display(message=f"{dropdown.value}")

                if limits.value:
                    LIMITS = int(limits.value)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å—Ç—å
                else:
                    pass  # –û—Å—Ç–∞–≤–ª—è–µ–º LIMITS –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

                usernames = select_records_with_limit(limit=LIMITS)
                logger.info(f"–°–ø–∏—Å–æ–∫ usernames: {usernames}")
                if len(usernames) == 0:
                    await self.app_logger.log_and_display(message=f"–í —Ç–∞–±–ª–∏—Ü–µ members –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞")
                    await SubscribeUnsubscribeTelegram(self.page).unsubscribe_from_the_group(client, dropdown.value)
                    break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                for username in usernames:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
                    await self.app_logger.log_and_display(message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å username: {username}")
                    # –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –≤ –≥—Ä—É–ø–ø—É –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É
                    try:
                        await self.add_user_test(client, dropdown.value, username)
                    except KeyboardInterrupt:  # –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                        await self.app_logger.log_and_display(message=translations["ru"]["errors"]["script_stopped"],
                                                              level="error")
                await SubscribeUnsubscribeTelegram(self.page).unsubscribe_from_the_group(client, dropdown.value)
                await self.app_logger.log_and_display(message=f"[!] –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –æ–∫–æ–Ω—á–µ–Ω!")
            await self.app_logger.end_time(start)
            await show_notification(self.page, "üîö –ö–æ–Ω–µ—Ü –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞")  # –í—ã–≤–æ–¥–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            self.page.go("/inviting")  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ üè†

        async def save(_):
            """–ó–∞–ø–∏—Å—å —Å—Å—ã–ª–∫–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
            links = link_entry_field.value.strip().split()

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Å—Å—ã–ª–∫—É(–∏): {links}")
            data_to_save = {
                "links_inviting": links,
            }
            save_links_inviting(data=data_to_save)
            logger.success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {data_to_save}")
            await self.app_logger.log_and_display(message="‚úÖ –°—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

            # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ
            updated_links = get_links_inviting()
            dropdown.options = [ft.dropdown.Option(link) for link in updated_links]
            dropdown.value = links[0] if links else None  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            self.page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

        async def launching_an_invite_once_an_hour(_):
            """
            üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
            ‚è∞ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ 1 —Ä–∞–∑ –≤ —á–∞—Å. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ 1 —Ä–∞–∑ –≤ —á–∞—Å.
            """
            try:
                async def general_invitation_group_scheduler():
                    await general_invitation_to_the_group(_)

                await self.app_logger.log_and_display(message="–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ 00 –º–∏–Ω—É—Ç –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞")
                self.scheduler.hourly(dt.time(minute=00, second=00),
                                      general_invitation_group_scheduler)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                while True:
                    await asyncio.sleep(1)
            except Exception as error:
                logger.exception(error)

        async def schedule_invite(_):
            """
            üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
            üïí –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
            """
            try:
                async def general_invitation_group_scheduler():
                    await general_invitation_to_the_group(_)

                await self.app_logger.log_and_display(
                    message=f"–°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {hour_textfield.value}:{minutes_textfield.value}")
                self.scheduler.once(dt.time(hour=int(hour_textfield.value), minute=int(minutes_textfield.value)),
                                    general_invitation_group_scheduler)
                while True:
                    await asyncio.sleep(1)
            except Exception as error:
                logger.exception(error)

        async def launching_invite_every_day_certain_time(_):
            """
            üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
            üìÖ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
            """

            async def general_invitation_group_scheduler():
                await general_invitation_to_the_group(_)

            await self.app_logger.log_and_display(
                message=f"–°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {hour_textfield.value}:{self.minutes}")
            self.scheduler.daily(dt.time(hour=int(hour_textfield.value), minute=int(minutes_textfield.value)),
                                 general_invitation_group_scheduler)
            while True:
                await asyncio.sleep(1)

        async def write_tame_start_inviting(_):
            """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏. –ß–∞—Å –∑–∞–ø—É—Å–∫–∞ –∏ –º–∏–Ω—É—Ç—ã –∑–∞–ø—É—Å–∫–∞"""
            await self.setting_page.recording_the_time_to_launch_an_invite_every_day(hour_textfield=hour_textfield,
                                                                                     minutes_textfield=minutes_textfield)

        async def write_limit_account_inviting_timex(_):
            """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å–Ω–æ–º –≤–æ –≤—Ä–µ–º—è –∏–≤–∞–π—Ç–∏–Ω–≥–∞"""
            await self.setting_page.create_main_window(variable="time_inviting", smaller_timex=smaller_timex,
                                                       larger_timex=larger_timex)

        async def write_limit_account_inviting(_):
            """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–∏–º–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
            await self.setting_page.record_setting(limit_type="account_limits", limits=limits)

        async def start_inviting_grup(_):
            """
            ‚öôÔ∏è –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
            """

            if inviting_switch.value:  # –ò–Ω–≤–∞–π—Ç–∏–Ω–≥
                await general_invitation_to_the_group(_)
            if inviting_1_time_per_hour_switch.value:
                await launching_an_invite_once_an_hour(_)
            if inviting_at_a_certain_time_switch.value:  # –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                await schedule_invite(_)
            if inviting_every_day_switch.value:  # –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
                await launching_invite_every_day_certain_time(_)

        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø
        dropdown = ft.Dropdown(width=WIDTH_WIDE_BUTTON,
                               options=[ft.DropdownOption(link) for link in self.links_inviting],
                               autofocus=True)
        width_tvo_input = 215
        width_one_input = 440

        # –î–≤–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        smaller_timex, larger_timex, save_button_timex = await TimeInputRowBuilder().build_time_inputs_with_save_button(
            on_save_click=write_limit_account_inviting_timex,
            label_min="–ú–∏–Ω. –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)",
            label_max="–ú–∞–∫—Å. –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)",
            width=width_tvo_input
        )
        # –î–≤–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        hour_textfield, minutes_textfield, save_button_time = await TimeInputRowBuilder().build_time_inputs_with_save_button(
            on_save_click=write_tame_start_inviting,
            label_min="–ß–∞—Å –∑–∞–ø—É—Å–∫–∞ (0‚Äì23)",
            label_max="–ú–∏–Ω—É—Ç—ã (0‚Äì59)",
            width=width_tvo_input
        )

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞, –¥–ª—è —Å—Å—ã–ª–æ–∫ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
        limits, save_button_limit = await LinkInputRowBuilder().build_link_input_with_save_button(
            on_save_click=write_limit_account_inviting,
            label_text="–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç", width=width_one_input)

        link_entry_field, save_button = await LinkInputRowBuilder().build_link_input_with_save_button(
            on_save_click=save,
            label_text="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞",
            width=width_one_input)

        # –ö–Ω–æ–ø–∫–∏-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
        inviting_switch = ft.CupertinoSwitch(label=translations["ru"]["inviting_menu"]["inviting"], value=False,
                                             disabled=True)
        inviting_1_time_per_hour_switch = ft.CupertinoSwitch(
            label=translations["ru"]["inviting_menu"]["invitation_1_time_per_hour"], value=False,
            disabled=True)
        inviting_at_a_certain_time_switch = ft.CupertinoSwitch(
            label=translations["ru"]["inviting_menu"]["invitation_at_a_certain_time"], value=False,
            disabled=True)
        inviting_every_day_switch = ft.CupertinoSwitch(label=translations["ru"]["inviting_menu"]["inviting_every_day"],
                                                       value=False, disabled=True)
        ToggleController(inviting_switch=inviting_switch,
                         inviting_1_time_per_hour_switch=inviting_1_time_per_hour_switch,
                         inviting_at_a_certain_time_switch=inviting_at_a_certain_time_switch,
                         inviting_every_day_switch=inviting_every_day_switch).element_handler_inviting(self.page)

        start_inviting = ft.ElevatedButton(
            width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
            text="–ó–∞–ø—É—Å–∫",
            on_click=start_inviting_grup  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—ë—Ä—Ç–∫—É
        )

        inviting_switch.disabled = False
        inviting_1_time_per_hour_switch.disabled = False
        inviting_at_a_certain_time_switch.disabled = False
        inviting_every_day_switch.disabled = False
        start_inviting.disabled = False

        self.page.views.append(
            ft.View("/inviting",
                    [await self.gui_program.key_app_bar(),  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
                     ft.Text(spans=[ft.TextSpan(translations["ru"]["inviting_menu"]["inviting"],
                                                ft.TextStyle(size=20, weight=ft.FontWeight.BOLD,
                                                             foreground=ft.Paint(
                                                                 gradient=ft.PaintLinearGradient((0, 20), (150, 20),
                                                                                                 [ft.Colors.PINK,
                                                                                                  ft.Colors.PURPLE])), ), ), ], ),
                     list_view,  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ üìù

                     ft.Row([await TimeInputRowBuilder().compose_time_input_row(min_time_input=smaller_timex,
                                                                                max_time_input=larger_timex,
                                                                                save_button=save_button_timex),
                             await TimeInputRowBuilder().compose_time_input_row(min_time_input=hour_textfield,
                                                                                max_time_input=minutes_textfield,
                                                                                save_button=save_button_time)]),

                     await self.gui_program.diver_castom(),  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è

                     ft.Row([await LinkInputRowBuilder().compose_link_input_row(link_input=limits,
                                                                                save_button=save_button_limit),
                             await LinkInputRowBuilder().compose_link_input_row(link_input=link_entry_field,
                                                                                save_button=save_button), ]),

                     await self.gui_program.diver_castom(),  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                     ft.Text(value="üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"),  # –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
                     dropdown,  # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø
                     await self.gui_program.diver_castom(),  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è

                     ft.Row([
                         inviting_switch,
                         inviting_1_time_per_hour_switch,
                         inviting_at_a_certain_time_switch,
                         inviting_every_day_switch
                     ]),

                     ft.Column([  # –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã –∏ –∫–Ω–æ–ø–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (page) –≤ –≤–∏–¥–µ –∫–æ–ª–æ–Ω–æ–∫.
                         start_inviting,
                     ])]))
        self.page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è üîÑ

    async def add_user_test(self, client, username_group, username):
        try:
            await self.app_logger.log_and_display(message=f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {username} –≤ –≥—Ä—É–ø–ø—É {username_group}.")
            await client.connect()

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            await client(InviteToChannelRequest(username_group, [username]))
            await self.app_logger.log_and_display(
                message=f"‚úÖ  –£—á–∞—Å—Ç–Ω–∏–∫ {username} –¥–æ–±–∞–≤–ª–µ–Ω, –µ—Å–ª–∏ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ {username_group}. –°–ø–∏–º –æ—Ç {TIME_INVITING_1} –¥–æ {TIME_INVITING_2}")
            await self.utils.record_inviting_results(time_range_1=TIME_INVITING_1, time_range_2=TIME_INVITING_2,
                                                     username=username)
        except UserChannelsTooMuchError:
            await self.app_logger.log_and_display(message=translations["ru"]["errors"]["user_channels_too_much"])
            await self.utils.record_inviting_results(time_range_1=TIME_INVITING_1, time_range_2=TIME_INVITING_2,
                                                     username=username)
        except (ChannelPrivateError, TypeNotFoundError, AuthKeyDuplicatedError, UserBannedInChannelError,
                SessionRevokedError):
            await self.app_logger.log_and_display(
                message=translations["ru"]["errors"]["invalid_auth_session_terminated"])
            await self.utils.record_and_interrupt(time_range_1=TIME_INVITING_1, time_range_2=TIME_INVITING_2)
            await client.disconnect()
        except UserNotMutualContactError:
            await self.app_logger.log_and_display(message=translations["ru"]["errors"]["user_not_mutual_contact"])
            await self.utils.record_inviting_results(time_range_1=TIME_INVITING_1, time_range_2=TIME_INVITING_2,
                                                     username=username)
        except (UserKickedError, UserDeactivatedBanError):
            await self.app_logger.log_and_display(message=translations["ru"]["errors"]["user_kicked_or_banned"])
            await self.utils.record_inviting_results(time_range_1=TIME_INVITING_1, time_range_2=TIME_INVITING_2,
                                                     username=username)
        except (UserIdInvalidError, UsernameNotOccupiedError, ValueError, UsernameInvalidError):
            await self.app_logger.log_and_display(message=translations["ru"]["errors"]["invalid_username"])
            await self.utils.record_inviting_results(time_range_1=TIME_INVITING_1, time_range_2=TIME_INVITING_2,
                                                     username=username)
        except ChatAdminRequiredError:
            await self.app_logger.log_and_display(message=translations["ru"]["errors"]["admin_rights_required"])
            await self.utils.record_inviting_results(time_range_1=TIME_INVITING_1, time_range_2=TIME_INVITING_2,
                                                     username=username)
        except UserPrivacyRestrictedError:
            await self.app_logger.log_and_display(message=translations["ru"]["errors"]["user_privacy_restricted"])
            await self.utils.record_inviting_results(time_range_1=TIME_INVITING_1, time_range_2=TIME_INVITING_2,
                                                     username=username)
        except BotGroupsBlockedError:
            await self.app_logger.log_and_display(message=translations["ru"]["errors"]["bot_group_blocked"])
            await self.utils.record_inviting_results(time_range_1=TIME_INVITING_1, time_range_2=TIME_INVITING_2,
                                                     username=username)
        except (TypeError, UnboundLocalError):
            await self.app_logger.log_and_display(message=translations["ru"]["errors"]["type_or_scope"])
        except BadRequestError:
            await self.app_logger.log_and_display(message=translations["ru"]["errors"]["chat_member_add_failed"])

        # –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É
        except ChatWriteForbiddenError:
            await self.app_logger.log_and_display(message=translations["ru"]["errors"]["chat_write_forbidden"])
            await self.utils.record_inviting_results(time_range_1=TIME_INVITING_1, time_range_2=TIME_INVITING_2,
                                                     username=username)
            await client.disconnect()  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        except InviteRequestSentError:
            await self.app_logger.log_and_display(message=translations["ru"]["errors"]["invite_request_sent"])
            await self.utils.record_inviting_results(time_range_1=TIME_INVITING_1, time_range_2=TIME_INVITING_2,
                                                     username=username)
            await client.disconnect()  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        except FloodWaitError as e:
            await self.app_logger.log_and_display(message=f"{translations["ru"]["errors"]["flood_wait"]}{e}",
                                                  level="error")
            await self.utils.record_and_interrupt(time_range_1=TIME_INVITING_1, time_range_2=TIME_INVITING_2)
            await client.disconnect()  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        except AuthKeyUnregisteredError:
            await self.app_logger.log_and_display(message=translations["ru"]["errors"]["auth_key_unregistered"])
            await self.utils.record_and_interrupt(time_range_1=TIME_INVITING_1, time_range_2=TIME_INVITING_2)
            await client.disconnect()
        except PeerFloodError:
            await self.app_logger.log_and_display(message=translations["ru"]["errors"]["peer_flood"], level="error")
            await self.utils.record_and_interrupt(time_range_1=TIME_INVITING_1, time_range_2=TIME_INVITING_2)
            await client.disconnect()  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
