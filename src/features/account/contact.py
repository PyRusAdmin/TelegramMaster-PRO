# -*- coding: utf-8 -*-
import asyncio
import random

import flet as ft
from loguru import logger
from telethon import functions, types
from telethon.errors import SessionRevokedError, AuthKeyUnregisteredError

from src.core.configs import BUTTON_HEIGHT, WIDTH_WIDE_BUTTON
from src.core.configs import path_accounts_folder
from src.core.sqlite_working_tools import add_member_to_db, write_to_database_contacts_accounts, write_contact_db
from src.core.utils import Utils
from src.features.account.connect import TGConnect
from src.features.account.parsing.gui_elements import GUIProgram
from src.features.account.parsing.parsing import UserInfo
from src.gui.gui import AppLogger, list_view
from src.gui.notification import show_notification
from src.locales.translations_loader import translations


class StatusDisplay:

    def __init__(self, page: ft.Page):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ StatusDisplay
        :param page: –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã ft.Page
        """
        self.page = page
        self.utils = Utils(page=page)

    def display_account_count(self):
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        sessions_count = len(self.utils.find_filess(directory_path=path_accounts_folder, extension='session'))
        list_view.controls.append(ft.Text(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ {sessions_count}"))
        return sessions_count


class TGContact:
    """
    –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ Telegram
    """

    def __init__(self, page: ft.Page):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ TGContact
        :param page: –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã ft.Page
        """
        self.page = page
        self.connect = TGConnect(page=page)
        self.app_logger = AppLogger(page=page)
        self.utils = Utils(page=page)
        self.user_info = UserInfo()
        self.gui_program = GUIProgram()
        self.status_display = StatusDisplay(page=page)

    async def working_with_contacts_menu(self):
        """
        –ú–µ–Ω—é üìá –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
        """
        list_view.controls.clear()  # –û—á–∏—Å—Ç–∫–∞ list_view –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –Ω–µ–¥–æ–ø—É—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

        sessions_count = self.status_display.display_account_count()  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ {sessions_count}")

        async def show_account_contact_list(_) -> None:
            """
            –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
            """
            try:
                start = await self.app_logger.start_time()
                for session_name in self.utils.find_filess(directory_path=path_accounts_folder, extension='session'):
                    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –∏ –≤—ã–≤–æ–¥ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å / —Ç–µ—Ä–º–∏–Ω–∞–ª

                    client = await self.connect.client_connect_string_session(session_name)
                    await self.connect.getting_account_data(client)

                    await self.parsing_and_recording_contacts_in_the_database(client=client)
                    client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ telegram
                await self.app_logger.end_time(start)
                await show_notification(self.page, "üîö –ö–æ–Ω–µ—Ü –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")  # –í—ã–≤–æ–¥–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            except Exception as error:
                logger.exception(error)

        async def delete_contact(_) -> None:
            """
            –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            """
            for session_name in self.utils.find_filess(directory_path=path_accounts_folder, extension='session'):
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –∏ –≤—ã–≤–æ–¥ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å / —Ç–µ—Ä–º–∏–Ω–∞–ª
                client = await self.connect.client_connect_string_session(session_name=session_name)
                await self.connect.getting_account_data(client)

                await self.we_get_the_account_id(client)
                client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ telegram

        async def inviting_contact(_) -> None:
            """
            –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—É—é –∫–Ω–∏–≥—É —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞ software_database.db, –¥–ª—è inviting
            """
            try:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ user_data/software_database.db
                for session_name in self.utils.find_filess(directory_path=path_accounts_folder, extension='session'):
                    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –∏ –≤—ã–≤–æ–¥ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å / —Ç–µ—Ä–º–∏–Ω–∞–ª
                    client = await self.connect.client_connect_string_session(session_name=session_name)
                    await self.connect.getting_account_data(client)

                    await self.add_contact_to_phone_book(client)
            except Exception as error:
                logger.exception(error)

        async def write_contact_to_db(_) -> None:
            """üìã –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
            data = input_numbers.value.strip()
            if not data:
                await show_notification(self.page, "‚ö†Ô∏è –ü–æ–ª–µ –ø—É—Å—Ç–æ–µ")
                return

            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫, —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            phones = [line.strip() for line in data.splitlines() if line.strip()]

            logger.info(f"–í—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: {len(phones)}")
            for phone in phones:
                write_contact_db(phone)

            await show_notification(self.page, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(phones)} –Ω–æ–º–µ—Ä–æ–≤")

        input_numbers = ft.TextField(label="–í—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
                                     label_style=ft.TextStyle(size=15), autofocus=True,
                                     width=int(WIDTH_WIDE_BUTTON) / 2 - 5,
                                     text_size=12)

        self.page.views.append(
            ft.View("/working_with_contacts",
                    [
                        await self.gui_program.key_app_bar(),
                        ft.Text(spans=[ft.TextSpan(
                            translations["ru"]["menu"]["contacts"],
                            ft.TextStyle(
                                size=20, weight=ft.FontWeight.BOLD,
                                foreground=ft.Paint(
                                    gradient=ft.PaintLinearGradient((0, 20), (150, 20), [ft.Colors.PINK,
                                                                                         ft.Colors.PURPLE]))))]),
                        list_view,  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ üìù
                        ft.Column([  # –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã –∏ –∫–Ω–æ–ø–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (page) –≤ –≤–∏–¥–µ –∫–æ–ª–æ–Ω–æ–∫.

                            ft.Row([input_numbers,  # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–æ–≤
                                    # üìã –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                                    ft.ElevatedButton(width=int(WIDTH_WIDE_BUTTON) / 2 - 5, height=BUTTON_HEIGHT,
                                                      text=translations["ru"]["contacts_menu"][
                                                          "creating_a_contact_list"],
                                                      on_click=write_contact_to_db)]),
                            # üë• –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                            ft.ElevatedButton(width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
                                              text=translations["ru"]["contacts_menu"]["show_a_list_of_contacts"],
                                              on_click=show_account_contact_list),
                            # üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                            ft.ElevatedButton(width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
                                              text=translations["ru"]["contacts_menu"]["deleting_contacts"],
                                              on_click=delete_contact),
                            # ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                            ft.ElevatedButton(width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
                                              text=translations["ru"]["contacts_menu"]["adding_contacts"],
                                              on_click=inviting_contact),
                        ])]))

    async def parsing_and_recording_contacts_in_the_database(self, client) -> None:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –∏ –∑–∞–ø–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        :param client: –¢–µ–ª–µ–≥—Ä–∞–º –∫–ª–∏–µ–Ω—Ç
        """
        try:
            entities: list = []  # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π
            for contact in await self.get_and_parse_contacts(client=client):  # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç parsing
                await self.get_user_data(user=contact, entities=entities)
                logger.info(contact)

            for raw_contact in entities:
                contact_dict = {
                    "username": raw_contact[0],
                    "user_id": raw_contact[1],
                    "access_hash": raw_contact[2],
                    "first_name": raw_contact[3],
                    "last_name": raw_contact[4],
                    "phone": raw_contact[5],
                    "online_at": raw_contact[6],
                    "photo_status": raw_contact[7],
                    "premium_status": raw_contact[8],
                }

                write_to_database_contacts_accounts(contact_dict)
        except Exception as error:
            logger.exception(error)

    async def we_get_the_account_id(self, client) -> None:
        """
        –ü–æ–ª—É—á–∞–µ–º id –∞–∫–∫–∞—É–Ω—Ç–∞

        :param client: –¢–µ–ª–µ–≥—Ä–∞–º –∫–ª–∏–µ–Ω—Ç
        """
        entities: list = []  # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π
        for user in await self.get_and_parse_contacts(client):  # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç parsing
            await self.get_user_data(user, entities)
            await self.we_show_and_delete_the_contact_of_the_phone_book(client, user)
        await write_parsed_chat_participants_to_db(entities)

    async def get_and_parse_contacts(self, client):
        """
        –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã

        :param client: –¢–µ–ª–µ–≥—Ä–∞–º –∫–ª–∏–µ–Ω—Ç
        """
        try:
            all_participants: list = []
            result = await client(functions.contacts.GetContactsRequest(hash=0))
            await self.app_logger.log_and_display(f"{result}")
            all_participants.extend(result.users)
            return all_participants
        except (SessionRevokedError, AuthKeyUnregisteredError) as e:
            logger.warning(f"–°–µ—Å—Å–∏—è –æ—Ç–æ–∑–≤–∞–Ω–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: {e}")
            return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ None
        except Exception as error:
            logger.exception(error)
            return []

    async def we_show_and_delete_the_contact_of_the_phone_book(self, client, user) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏

        :param client: –¢–µ–ª–µ–≥—Ä–∞–º –∫–ª–∏–µ–Ω—Ç
        :param user: –¢–µ–ª–µ–≥—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            await client(functions.contacts.DeleteContactsRequest(id=[await self.user_info.get_user_id(user)]))
            await self.app_logger.log_and_display(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 - 4 —Å–µ–∫—É–Ω–¥—ã")
            await asyncio.sleep(random.randrange(2, 3, 4))  # –°–ø–∏–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –æ flood
        except Exception as error:
            logger.exception(error)

    async def add_contact_to_phone_book(self, client) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—É—é –∫–Ω–∏–≥—É

        :param client: –¢–µ–ª–µ–≥—Ä–∞–º –∫–ª–∏–µ–Ω—Ç
        """
        try:
            records: list = await open_and_read_data(table_name="contact", page=self.page)
            await self.app_logger.log_and_display(f"–í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤: {len(records)}")
            entities: list = []  # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π
            for rows in records:
                user = {"phone": rows[0]}
                phone = user["phone"]
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—É—é –∫–Ω–∏–≥—É
                await client(functions.contacts.ImportContactsRequest(contacts=[types.InputPhoneContact(client_id=0,
                                                                                                        phone=phone,
                                                                                                        first_name="–ù–æ–º–µ—Ä",
                                                                                                        last_name=phone)]))
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ https://docs.telethon.dev/en/stable/concepts/entities.html
                    contact = await client.get_entity(phone)
                    await self.get_user_data(contact, entities)
                    await self.app_logger.log_and_display(f"[+] –ö–æ–Ω—Ç–∞–∫—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—É—é –∫–Ω–∏–≥—É!")
                    await asyncio.sleep(4)
                    # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ parsing –≤ —Ñ–∞–π–ª members_contacts.db, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ inviting
                    # –ü–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∞ —É–¥–∞–ª—è–µ—Ç –Ω–æ–º–µ—Ä —Å–æ —Å–ø–∏—Å–∫–∞
                    await delete_row_db(table="contact", column="phone", value=user["phone"])
                except ValueError:
                    await self.app_logger.log_and_display(
                        translations["ru"]["errors"]["contact_not_registered_or_cannot_add"])
                    # –ü–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∞ —É–¥–∞–ª—è–µ—Ç –Ω–æ–º–µ—Ä —Å–æ —Å–ø–∏—Å–∫–∞
                    await delete_row_db(table="contact", column="phone", value=user["phone"])
            client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ telegram
            add_member_to_db(log_data=entities)  # –ó–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É members
        except Exception as error:
            logger.exception(error)

    async def get_user_data(self, user, entities) -> None:
        """
        –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        :param user: –¢–µ–ª–µ–≥—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param entities: –°–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π
        """
        try:
            entities.append(
                [
                    await self.user_info.get_username(user),
                    await self.user_info.get_user_id(user),
                    await self.user_info.get_access_hash(user),
                    await self.user_info.get_first_name(user),
                    await self.user_info.get_last_name(user),
                    await self.user_info.get_user_phone(user),
                    await self.user_info.get_user_online_status(user),
                    await self.user_info.get_photo_status(user),
                    await self.user_info.get_user_premium_status(user)
                ]
            )
        except Exception as error:
            logger.exception(error)
