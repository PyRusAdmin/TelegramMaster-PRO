# -*- coding: utf-8 -*-
import asyncio
import os
import os.path
import sqlite3

import flet as ft  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É flet
from loguru import logger
from telethon.errors import (ApiIdInvalidError, AuthKeyDuplicatedError, AuthKeyNotFound, AuthKeyUnregisteredError,
                             PasswordHashInvalidError, PhoneNumberBannedError, SessionPasswordNeededError,
                             TimedOutError, TypeNotFoundError, UserDeactivatedBanError, YouBlockedUserError,
                             SessionRevokedError)
from telethon.sessions import StringSession
from telethon.sync import TelegramClient
from thefuzz import fuzz

from src.core.configs import BUTTON_HEIGHT, ConfigReader, WIDTH_WIDE_BUTTON
from src.core.database.account import getting_account, write_account_to_db
from src.core.utils import Utils
from src.features.proxy.checking_proxy import Proxy
from src.gui.gui import AppLogger, list_view
from src.gui.gui_elements import GUIProgram
from src.gui.notification import show_notification
from src.locales.translations_loader import translations


class TGConnect:

    def __init__(self, page):
        self.page = page  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        self.config_reader = ConfigReader()
        self.api_id_api_hash = self.config_reader.get_api_id_data_api_hash_data()
        self.api_id = self.api_id_api_hash[0]
        self.api_hash = self.api_id_api_hash[1]
        self.app_logger = AppLogger(page)
        self.utils = Utils(page=page)
        self.proxy = Proxy(page=page)
        self.gui_program = GUIProgram()

    async def connect_string_session(self, session_name: str) -> TelegramClient:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —á–µ—Ä–µ–∑ StringSession"""
        client = TelegramClient(StringSession(session_name), api_id=self.api_id, api_hash=self.api_hash,
                                system_version="4.16.30-vxCUSTOM")
        await client.connect()
        me = await client.get_me()
        phone = me.phone or ""
        logger.info(f"üßæ –ê–∫–∫–∞—É–Ω—Ç: | ID: {me.id} | Phone: {phone}")
        return client

    async def check_menu(self):
        """
        –ú–µ–Ω—é üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        """

        list_view.controls.clear()  # –û—á–∏—Å—Ç–∫–∞ list_view –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –Ω–µ–¥–æ–ø—É—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

        async def check_for_spam(_) -> None:
            """
            –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —Å–ø–∞–º —á–µ—Ä–µ–∑ @SpamBot
            """
            try:
                start = await self.app_logger.start_time()  # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
                session_string = getting_account()
                for session_name in session_string:
                    client = await self.connect_string_session(session_name=session_name)
                    try:
                        await client.send_message(entity='SpamBot',
                                                  message='/start')  # –ù–∞—Ö–æ–¥–∏–º —Å–ø–∞–º –±–æ—Ç, –∏ –≤–≤–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É /start
                        for message in await client.get_messages('SpamBot'):
                            await self.app_logger.log_and_display(message=f"{session_name} {message.message}")
                            similarity_ratio_ru: int = fuzz.ratio(f"{message.message}",
                                                                  "–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –í—ã —Å —ç—Ç–∏–º —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, "
                                                                  "–∏–Ω–æ–≥–¥–∞ –Ω–∞—à–∞ –∞–Ω—Ç–∏—Å–ø–∞–º-—Å–∏—Å—Ç–µ–º–∞ –∏–∑–ª–∏—à–Ω–µ —Å—É—Ä–æ–≤–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ "
                                                                  "–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. –ï—Å–ª–∏ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç "
                                                                  "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ –æ—à–∏–±–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –Ω–∞—à–∏–º "
                                                                  "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –ü–æ–∫–∞ –¥–µ–π—Å—Ç–≤—É—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ "
                                                                  "–ø–∏—Å–∞—Ç—å —Ç–µ–º, –∫—Ç–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª –í–∞—à –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, "
                                                                  "–∞ —Ç–∞–∫–∂–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Ç–∞–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã. "
                                                                  "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –í–∞–º –ø–µ—Ä–≤—ã–º, –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å, "
                                                                  "–Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.")
                            if similarity_ratio_ru >= 97:
                                await self.app_logger.log_and_display(message=f"‚õî –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                                await client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ session —Ñ–∞–π–ª–∞.
                                await self.app_logger.log_and_display(
                                    message=f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ SpamBot. {session_name}: {message.message}")
                                # –ü–µ—Ä–µ–Ω–æ—Å Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ø–∞–ø–∫—É banned, –µ—Å–ª–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–Ω–µ
                                self.utils.working_with_accounts(
                                    account_folder=f"user_data/accounts/{session_name}.session",
                                    new_account_folder=f"user_data/accounts/banned/{session_name}.session")
                            similarity_ratio_en: int = fuzz.ratio(f"{message.message}",
                                                                  "I‚Äôm very sorry that you had to contact me. Unfortunately, "
                                                                  "some account_actions can trigger a harsh response from our "
                                                                  "anti-spam systems. If you think your account was limited by "
                                                                  "mistake, you can submit a complaint to our moderators. While "
                                                                  "the account is limited, you will not be able to send messages "
                                                                  "to people who do not have your number in their phone contacts "
                                                                  "or add them to groups and channels. Of course, when people "
                                                                  "contact you first, you can always reply to them.")
                            if similarity_ratio_en >= 97:
                                await self.app_logger.log_and_display(message=f"‚õî –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                                await client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ session —Ñ–∞–π–ª–∞.
                                await self.app_logger.log_and_display(
                                    message=f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ SpamBot. {session_name}: {message.message}")
                                # –ü–µ—Ä–µ–Ω–æ—Å Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ø–∞–ø–∫—É banned, –µ—Å–ª–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–Ω–µ
                                await self.app_logger.log_and_display(message=f"{session_name}")
                                self.utils.working_with_accounts(
                                    account_folder=f"user_data/accounts/{session_name}.session",
                                    new_account_folder=f"user_data/accounts/banned/{session_name}.session")
                            await self.app_logger.log_and_display(
                                message=f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ SpamBot. {session_name}: {message.message}")
                            await client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ session —Ñ–∞–π–ª–∞.
                    except (AttributeError, AuthKeyUnregisteredError, YouBlockedUserError) as e:
                        await self.app_logger.log_and_display(message=f"‚ùå –û—à–∏–±–∫–∞: {e}")
                    except SessionRevokedError as e:
                        await self.handle_banned_account(telegram_client=client, session_name=session_name, exception=e)
                await self.app_logger.end_time(start)
                await show_notification(page=self.page, message="üîö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as error:
                logger.exception(error)

        async def validation_check(_) -> None:
            """
            –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã Telegram –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
            """
            try:
                start = await self.app_logger.start_time()
                await self.proxy.checking_the_proxy_for_work()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ proxy
                session_string = getting_account()
                for session_name in session_string:
                    await self.app_logger.log_and_display(message=f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –∞–∫–∫–∞—É–Ω—Ç: {session_name}")
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    await self.verify_account(session_name=session_name)
                await self.app_logger.log_and_display(message=f"–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram üìÅ")
                await self.app_logger.end_time(start)
                await show_notification(self.page, "üîö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as error:
                logger.exception(error)

        async def renaming_accounts(_):
            """
            –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Telegram –∞–∫–∫–∞—É–Ω—Ç–µ.
            """
            try:
                start = await self.app_logger.start_time()
                await self.proxy.checking_the_proxy_for_work()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ proxy
                # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                for session_name in self.utils.find_filess(directory_path=path_accounts_folder, extension='session'):
                    await self.app_logger.log_and_display(message=f"‚ö†Ô∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º—ã–π –∞–∫–∫–∞—É–Ω—Ç: {session_name}")
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    client = await self.client_connect_string_session(session_name=session_name)
                    await self.getting_account_data(client)
                    try:
                        me = await client.get_me()
                        await self.rename_session_file(telegram_client=client, phone_old=session_name, phone=me.phone)
                    except AttributeError:  # –ï—Å–ª–∏ –≤ get_me –ø—Ä–∏—Ö–æ–¥–∏—Ç NoneType (None)
                        pass
                    except TypeNotFoundError:
                        await client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Telegram, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è session —Ñ–∞–π–ª–∞
                        await self.app_logger.log_and_display(
                            message=f"‚õî –ë–∏—Ç—ã–π —Ñ–∞–π–ª –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç banned: {session_name}.session. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—É—â–µ–Ω –ø–æ–¥ –¥—Ä—É–≥–∏–º IP")
                        self.utils.working_with_accounts(account_folder=f"user_data/accounts/{session_name}.session",
                                                         new_account_folder=f"user_data/accounts/banned/{session_name}.session")
                    except AuthKeyUnregisteredError:
                        await client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Telegram, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è session —Ñ–∞–π–ª–∞
                        await self.app_logger.log_and_display(
                            message=translations["ru"]["errors"]["auth_key_unregistered"])
                        self.utils.working_with_accounts(account_folder=f"user_data/accounts/{session_name}.session",
                                                         new_account_folder=f"user_data/accounts/banned/{session_name}.session")
                await self.app_logger.end_time(start)
                await show_notification(page=self.page, message="üîö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as error:
                logger.exception(error)

        async def full_verification(_) -> None:
            try:
                start = await self.app_logger.start_time()
                await validation_check(_)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                await renaming_accounts(_)  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                await check_for_spam(_)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º –±–æ—Ç–æ–≤
                await self.app_logger.end_time(start)
                await show_notification(page=self.page, message="üîö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as error:
                logger.exception(error)

        self.page.views.append(
            ft.View("/account_verification_menu",
                    [await self.gui_program.key_app_bar(),  # –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (page)
                     ft.Text(spans=[ft.TextSpan(
                         translations["ru"]["menu"]["account_check"],
                         ft.TextStyle(size=20, weight=ft.FontWeight.BOLD,
                                      foreground=ft.Paint(
                                          gradient=ft.PaintLinearGradient((0, 20), (150, 20), [ft.Colors.PINK,
                                                                                               ft.Colors.PURPLE])), ), ), ], ),
                     list_view,
                     ft.Column([  # –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã –∏ –∫–Ω–æ–ø–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (page) –≤ –≤–∏–¥–µ –∫–æ–ª–æ–Ω–æ–∫.
                         # ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Å–ø–∞–º –±–æ—Ç
                         ft.ElevatedButton(
                             width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
                             text=translations["ru"]["account_verification"]["spam_check"],
                             on_click=check_for_spam
                         ),
                         # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                         ft.ElevatedButton(
                             width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
                             text=translations["ru"]["account_verification"]["validation"],
                             on_click=validation_check
                         ),
                         # ‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                         ft.ElevatedButton(
                             width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
                             text=translations["ru"]["account_verification"]["renaming"],
                             on_click=renaming_accounts
                         ),
                         # üîç –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                         ft.ElevatedButton(
                             width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
                             text=translations["ru"]["account_verification"]["full_verification"],
                             on_click=full_verification
                         ),
                     ])]))

    async def getting_account_data(self, client):
        """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        await client.connect()
        me = await client.get_me()
        phone = me.phone or ""
        logger.info(f"üßæ –ê–∫–∫–∞—É–Ω—Ç: | ID: {me.id} | Phone: {phone}")
        await self.app_logger.log_and_display(message=f"üßæ –ê–∫–∫–∞—É–Ω—Ç: | ID: {me.id} | Phone: {phone}")

    async def client_connect_string_session(self, session_name):
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –∞–∫–∫–∞—É–Ω—Ç—É —á–µ—Ä–µ–∑ StringSession
        :param session_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Ñ–∞–π–ª .session)
        """
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—è StringSession –∏ –≤–∞—à—É —Å—Ç—Ä–æ–∫—É
        client = TelegramClient(StringSession(session_name), api_id=self.api_id, api_hash=self.api_hash,
                                system_version="4.16.30-vxCUSTOM")
        await client.connect()

        if not await client.is_user_authorized():
            logger.error("‚ùå –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
            await client.disconnect()
            raise ValueError("Unauthorized session")

        me = await client.get_me()
        phone = me.phone or ""
        logger.info(f"üßæ –ê–∫–∫–∞—É–Ω—Ç: | ID: {me.id} | Phone: {phone}")
        await self.app_logger.log_and_display(message=f"üßæ –ê–∫–∫–∞—É–Ω—Ç: | ID: {me.id} | Phone: {phone}")
        return client

    async def verify_account(self, session_name) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã.

        :param session_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        """
        try:
            await self.app_logger.log_and_display(message=f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {session_name}")
            client = await self.connect_string_session(session_name=session_name)
            try:
                if not await client.is_user_authorized():  # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω
                    await client.disconnect()
                    await asyncio.sleep(5)
                    self.utils.working_with_accounts(account_folder=f"user_data/accounts/{session_name}.session",
                                                     new_account_folder=f"user_data/accounts/banned/{session_name}.session")
                else:
                    await self.app_logger.log_and_display(message=f"–ê–∫–∫–∞—É–Ω—Ç {session_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    await client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            except (PhoneNumberBannedError, UserDeactivatedBanError, AuthKeyNotFound,
                    AuthKeyUnregisteredError, AuthKeyDuplicatedError) as e:
                await self.handle_banned_account(client, session_name, e)
            except TimedOutError as error:
                await self.app_logger.log_and_display(message=f"‚ùå –û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞: {error}")
                await asyncio.sleep(2)
            except AttributeError:
                pass
        except Exception as error:
            logger.exception(error)

    async def handle_banned_account(self, telegram_client, session_name, exception):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ banned –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
        telegram_client.disconnect() - –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram.
        working_with_accounts() - –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞. –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É - account_folder. –ü—É—Ç—å –∫ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ,
        –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª - new_account_folder

        :param telegram_client: TelegramClient
        :param session_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
        :param exception: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        """
        try:
            await self.app_logger.log_and_display(message=f"‚õî –ê–∫–∫–∞—É–Ω—Ç banned: {session_name}. {str(exception)}")
            await telegram_client.disconnect()
            self.utils.working_with_accounts(account_folder=f"user_data/accounts/{session_name}.session",
                                             new_account_folder=f"user_data/accounts/banned/{session_name}.session")
        except sqlite3.OperationalError:
            await telegram_client.disconnect()
            self.utils.working_with_accounts(account_folder=f"user_data/accounts/{session_name}.session",
                                             new_account_folder=f"user_data/accounts/banned/{session_name}.session")

    async def rename_session_file(self, telegram_client, phone_old, phone) -> None:
        """
        –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç session —Ñ–∞–π–ª—ã.

        :param telegram_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
        :param phone_old: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        :param phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è (–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è session —Ñ–∞–π–ª–∞)
        """
        await telegram_client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è session —Ñ–∞–π–ª–∞
        try:
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ session —Ñ–∞–π–ª–∞
            os.rename(f"user_data/accounts/{phone_old}.session", f"user_data/accounts/{phone}.session", )
        except FileExistsError:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
            os.remove(f"user_data/accounts/{phone_old}.session")
        except Exception as error:
            logger.exception(error)

    async def account_connection_menu(self):
        """
        –ú–µ–Ω—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –ø–æ session)
        """

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        phone_number = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", multiline=False, max_lines=1)

        async def connecting_number_accounts(_) -> None:
            """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
            phone_number_value = phone_number.value
            await self.app_logger.log_and_display(message=f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number_value}")

            # client = TelegramClient(StringSession(), self.api_id, self.api_hash, system_version="4.16.30-vxCUSTOM", proxy=self.proxy.reading_proxy_data_from_the_database())
            # await client.connect()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
            # client.session.save_entities = False
            # print(await client.session.save())
            # –î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            client = TelegramClient(f"{phone_number_value}", api_id=self.api_id, api_hash=self.api_hash,
                                    system_version="4.16.30-vxCUSTOM",
                                    proxy=self.proxy.reading_proxy_data_from_the_database())
            await client.connect()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
            # logger.info(f"‚ú® STRING SESSION: {StringSession.save(client.session)}")
            # session_string = StringSession.save(client.session)
            # client = TelegramClient(StringSession(session_string), api_id=self.api_id, api_hash=self.api_hash, system_version="4.16.30-vxCUSTOM")
            # me = await client.get_me()
            # phone = me.phone or ""
            # logger.info(f"üßæ –ê–∫–∫–∞—É–Ω—Ç: | ID: {me.id} | Phone: {phone}")

            if not await client.is_user_authorized():
                await self.app_logger.log_and_display(message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                await client.send_code_request(phone_number_value)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
                await asyncio.sleep(2)
                passww = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ telegram:", multiline=True, max_lines=1)

                async def btn_click_code(_) -> None:
                    try:
                        await self.app_logger.log_and_display(message=f"–ö–æ–¥ telegram: {passww.value}")
                        await client.sign_in(phone_number_value, passww.value)  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –∫–æ–¥–æ–º
                        client.disconnect()
                        self.page.go("/")  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ 2FA –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                        self.page.update()
                    except SessionPasswordNeededError:  # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
                        await self.app_logger.log_and_display(
                            message=translations["ru"]["errors"]["two_factor_required"])
                        pass_2fa = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å telegram:", multiline=False, max_lines=1)

                        async def btn_click_password(_) -> None:
                            await self.app_logger.log_and_display(message=f"–ü–∞—Ä–æ–ª—å telegram: {pass_2fa.value}")
                            try:
                                await client.sign_in(password=pass_2fa.value)
                                await self.app_logger.log_and_display(message=f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
                                client.disconnect()
                                self.page.go("/")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                                self.page.update()
                            except PasswordHashInvalidError:
                                await self.app_logger.log_and_display(message=f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
                                await show_notification(self.page, f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                                self.page.go("/")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫

                        button_password = ft.ElevatedButton(width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
                                                            text=translations["ru"]["buttons"]["done"],
                                                            on_click=btn_click_password)  # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
                        self.page.views.append(ft.View(controls=[pass_2fa, button_password]))
                        self.page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è
                    except ApiIdInvalidError:
                        await self.app_logger.log_and_display(message=f"[!] –ù–µ–≤–µ—Ä–Ω—ã–µ API ID –∏–ª–∏ API Hash.")
                        await client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram
                    except Exception as error:
                        logger.exception(error)
                        await client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram

                self.page.views.append(ft.View(controls=[passww,
                                                         ft.ElevatedButton(width=WIDTH_WIDE_BUTTON,
                                                                           height=BUTTON_HEIGHT,
                                                                           text=translations["ru"]["buttons"]["done"],
                                                                           on_click=btn_click_code)]))  # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
                self.page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
            self.page.update()

        # –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        selected_files = ft.Text(value="Session —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", size=12)

        async def btn_click(e: ft.FilePickerResultEvent) -> None:
            """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram –ø–æ session —Ñ–∞–π–ª—É"""

            if e.files:
                file_name = e.files[0].name  # –ò–º—è —Ñ–∞–π–ª–∞
                file_path = e.files[0].path  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

                logger.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_name}")
                logger.info(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_path}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ ".session"
                if file_name.endswith(".session"):
                    selected_files.value = f"–í—ã–±—Ä–∞–Ω session —Ñ–∞–π–ª: {file_name}"
                    logger.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {selected_files.value}")
                    selected_files.update()
                    session_path = os.path.splitext(file_path)[0]  # –ø—É—Ç—å –±–µ–∑ .session
                    logger.info(f"–ü—É—Ç—å –±–µ–∑ .session: {session_path}")
                    client = TelegramClient(session=f"{session_path}", api_id=self.api_id, api_hash=self.api_hash,
                                            system_version="4.16.30-vxCUSTOM")
                    await client.connect()
                    logger.info(f"‚ú® STRING SESSION: {StringSession.save(client.session)}")
                    session_string = StringSession.save(client.session)
                    await client.disconnect()
                    client = TelegramClient(StringSession(session_string), api_id=self.api_id, api_hash=self.api_hash,
                                            system_version="4.16.30-vxCUSTOM")
                    await client.connect()
                    me = await client.get_me()
                    try:
                        phone = me.phone or ""
                        logger.info(f"üßæ –ê–∫–∫–∞—É–Ω—Ç: | ID: {me.id} | Phone: {phone}")
                        await client.disconnect()
                        write_account_to_db(session_string=session_string)  # –ó–∞–ø–∏—Å—å —Å—Ç—Ä–æ–∫–∏ —Å–µ—Å—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    except AttributeError:
                        await show_notification(page=self.page, message="–ù–µ –≤–∞–ª–∏–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç")
                else:
                    selected_files.value = "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è session —Ñ–∞–π–ª–æ–º"
            else:
                selected_files.value = "–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω"
            selected_files.update()
            self.page.update()

        pick_files_dialog = ft.FilePicker(on_result=btn_click)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
        self.page.overlay.append(pick_files_dialog)  # –î–æ–±–∞–≤–ª—è–µ–º FilePicker –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

        self.page.views.append(
            ft.View("/account_connection_menu",
                    [await self.gui_program.key_app_bar(),
                     ft.Text(spans=[ft.TextSpan("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                                                ft.TextStyle(
                                                    size=20,
                                                    weight=ft.FontWeight.BOLD,
                                                    foreground=ft.Paint(
                                                        gradient=ft.PaintLinearGradient((0, 20), (150, 20),
                                                                                        [ft.Colors.PINK,
                                                                                         ft.Colors.PURPLE]))))]),
                     list_view,  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ üìù
                     phone_number,
                     # üìû –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                     ft.ElevatedButton(width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
                                       text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", on_click=connecting_number_accounts),

                     await self.gui_program.diver_castom(),  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è

                     ft.Text(spans=[ft.TextSpan(
                         "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ session –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram",
                         ft.TextStyle(
                             size=20,
                             weight=ft.FontWeight.BOLD,
                             foreground=ft.Paint(
                                 gradient=ft.PaintLinearGradient((0, 20), (150, 20), [ft.Colors.PINK,
                                                                                      ft.Colors.PURPLE]))))]),

                     ft.Text(f"–í—ã–±–µ—Ä–∏—Ç–µ session —Ñ–∞–π–ª\n", size=15),
                     selected_files,  # –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                     ft.Column([  # –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã –∏ –∫–Ω–æ–ø–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (page) –≤ –≤–∏–¥–µ –∫–æ–ª–æ–Ω–æ–∫.
                         # üîë –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ session –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                         ft.ElevatedButton(width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
                                           text=translations["ru"]["create_groups_menu"]["choose_session_files"],
                                           on_click=lambda _: pick_files_dialog.pick_files()),  # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
                     ])]))
# 557
