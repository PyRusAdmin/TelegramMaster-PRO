# -*- coding: utf-8 -*-
import os
import os.path
import sqlite3
import time

from loguru import logger
from telethon import TelegramClient
from telethon.errors import AuthKeyDuplicatedError, PhoneNumberBannedError, UserDeactivatedBanError, TimedOutError, \
    AuthKeyNotFound, TypeNotFoundError, AuthKeyUnregisteredError
from telethon.errors import YouBlockedUserError
from telethon.tl.functions.users import GetFullUserRequest
from thefuzz import fuzz

from system.account_actions.TGConnect import TGConnect
from system.auxiliary_functions.auxiliary_functions import find_files, working_with_accounts
from system.auxiliary_functions.global_variables import ConfigReader
from system.proxy.checking_proxy import checking_the_proxy_for_work


async def renaming_a_session(client, phone_old, phone, directory_path) -> None:
    """
    –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ session —Ñ–∞–π–ª–æ–≤
    :param client: –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
    :param phone_old: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    :param phone: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    :param directory_path: –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Å —Ñ–∞–π–ª–∞–º–∏
    """
    await client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è session —Ñ–∞–π–ª–∞
    try:
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ session —Ñ–∞–π–ª–∞
        os.rename(f"{directory_path}/{phone_old}.session", f"{directory_path}/{phone}.session", )
    except FileExistsError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
        os.remove(f"{directory_path}/{phone_old}.session")


async def account_name(client, name_account, directory_path, session):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
    :param client: –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
    :param name_account: –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    :param directory_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    :param session: –∏–º—è session —Ñ–∞–π–ª–∞
    """
    try:
        full = await client(GetFullUserRequest(name_account))
        for user in full.users:
            first_name = user.first_name if user.first_name else ""
            last_name = user.last_name if user.last_name else ""
            phone = user.phone if user.phone else ""
            return first_name, last_name, phone
    except TypeNotFoundError:
        await client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Telegram, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è session —Ñ–∞–π–ª–∞
        logger.error(f"‚õî –ë–∏—Ç—ã–π —Ñ–∞–π–ª –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω {session.split('/')[-1]}.session, –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—â–µ–Ω –ø–æ–¥ –¥—Ä—É–≥–∏–º ip")
        working_with_accounts(account_folder=f"{directory_path}/{session.split('/')[-1]}.session",
                              new_account_folder=f"user_settings/accounts/invalid_account/{session.split('/')[-1]}.session")
    except AuthKeyUnregisteredError:
        await client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Telegram, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è session —Ñ–∞–π–ª–∞
        logger.error(f"‚õî –ë–∏—Ç—ã–π —Ñ–∞–π–ª –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω {session.split('/')[-1]}.session, –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—â–µ–Ω –ø–æ–¥ –¥—Ä—É–≥–∏–º ip")
        working_with_accounts(account_folder=f"{directory_path}/{session.split('/')[-1]}.session",
                              new_account_folder=f"user_settings/accounts/invalid_account/{session.split('/')[-1]}.session")


async def account_verification_for_telegram(directory_path, extension) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram
    :param directory_path: –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    :param extension: —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    """
    logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram –∏–∑ –ø–∞–ø–∫–∏ üìÅ: {directory_path}")
    account_verification = AccountVerification()
    tg_connect = TGConnect()
    await checking_the_proxy_for_work()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ proxy

    # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    entities = find_files(directory_path, extension)
    for entities in entities:
        logger.info(f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –∞–∫–∫–∞—É–Ω—Ç {directory_path}/{entities[0]}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        proxy = await tg_connect.reading_proxies_from_the_database()
        await account_verification.account_verification(directory_path, entities[0], proxy)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
        client = await tg_connect.connect_to_telegram(file=entities, directory_path=directory_path)
        try:
            first_name, last_name, phone = await account_name(client, name_account="me", directory_path=directory_path,
                                                              session=entities[0])
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            logger.info(f"üìî –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {first_name} {last_name} {phone}")

            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            await renaming_a_session(client, entities[0], phone, directory_path)
        except TypeError as e:
            logger.error(f"TypeError: {e}")  # –û—à–∏–±–∫–∞

    logger.info(f"–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram –∏–∑ –ø–∞–ø–∫–∏ üìÅ: {directory_path}")


class AccountVerification:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram"""

    def __init__(self):
        self.config_reader = ConfigReader()
        self.api_id_api_hash = self.config_reader.get_api_id_data_api_hash_data()
        self.tg_connect = TGConnect()

    async def account_verification(self, directory_path, session, proxy) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        :param directory_path: –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        :param session: –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        :param proxy: –ø—Ä–æ–∫—Å–∏
        """
        # TODO: –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ connecting_to_telegram() –∏–ª–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∞—Å—Å–æ–º TGConnect
        api_id = self.api_id_api_hash[0]
        api_hash = self.api_id_api_hash[1]
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {session}. –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ: api_id {api_id}, api_hash {api_hash}")
        client = TelegramClient(f"{directory_path}/{session}", api_id=api_id, api_hash=api_hash,
                                system_version="4.16.30-vxCUSTOM", proxy=proxy)
        try:
            await client.connect()  # –ü–æ–¥—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞
            if not await client.is_user_authorized():  # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω, —Ç–æ —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
                await client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Telegram, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è session —Ñ–∞–π–ª–∞
                working_with_accounts(account_folder=f"{directory_path}/{session.split('/')[-1]}.session",
                                      new_account_folder=f"user_settings/accounts/invalid_account/{session.split('/')[-1]}.session")
                time.sleep(1)
                return  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            await client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, —á—Ç–æ –±—ã session —Ñ–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
        except AttributeError as e:
            logger.info(f"{e}")
        except (PhoneNumberBannedError, UserDeactivatedBanError, AuthKeyNotFound, sqlite3.DatabaseError,
                AuthKeyUnregisteredError, AuthKeyDuplicatedError):
            client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Telegram, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è session —Ñ–∞–π–ª–∞
            logger.error(
                f"‚õî –ë–∏—Ç—ã–π —Ñ–∞–π–ª –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω {session.split('/')[-1]}.session, –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—â–µ–Ω –ø–æ–¥ –¥—Ä—É–≥–∏–º ip")
            working_with_accounts(account_folder=f"{directory_path}/{session.split('/')[-1]}.session",
                                  new_account_folder=f"user_settings/accounts/invalid_account/{session.split('/')[-1]}.session")
        except TimedOutError as e:
            logger.exception(e)
            time.sleep(2)

    async def check_account_for_spam(self, folders) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —Å–ø–∞–º —á–µ—Ä–µ–∑ @SpamBot
        :param folders: –ø–∞–ø–∫–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        """
        entities = find_files(directory_path=f"user_settings/accounts/{folders}", extension='session')
        for file in entities:
            client = await self.tg_connect.connect_to_telegram(file, directory_path=f"user_settings/accounts/{folders}")
            try:
                await client.send_message('SpamBot', '/start')  # –ù–∞—Ö–æ–¥–∏–º —Å–ø–∞–º –±–æ—Ç, –∏ –≤–≤–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É /start
                message_bot = await client.get_messages('SpamBot')
                for message in message_bot:
                    logger.info(f"{file} {message.message}")
                    similarity_ratio_ru: int = fuzz.ratio(f"{message.message}",
                                                          "–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –í—ã —Å —ç—Ç–∏–º —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, "
                                                          "–∏–Ω–æ–≥–¥–∞ –Ω–∞—à–∞ –∞–Ω—Ç–∏—Å–ø–∞–º-—Å–∏—Å—Ç–µ–º–∞ –∏–∑–ª–∏—à–Ω–µ —Å—É—Ä–æ–≤–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ "
                                                          "–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. –ï—Å–ª–∏ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç "
                                                          "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ –æ—à–∏–±–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –Ω–∞—à–∏–º "
                                                          "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –ü–æ–∫–∞ –¥–µ–π—Å—Ç–≤—É—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ "
                                                          "–ø–∏—Å–∞—Ç—å —Ç–µ–º, –∫—Ç–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª –í–∞—à –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, "
                                                          "–∞ —Ç–∞–∫–∂–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Ç–∞–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã. "
                                                          "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –í–∞–º –ø–µ—Ä–≤—ã–º, –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å, "
                                                          "–Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.")
                    if similarity_ratio_ru >= 97:
                        logger.info('‚õî –ê–∫–∫–∞—É–Ω—Ç –≤ –±–∞–Ω–µ')
                        await client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, —á—Ç–æ –±—ã session —Ñ–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
                        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ SpamBot. {file[0]}: {message.message}")
                        # –ü–µ—Ä–µ–Ω–æ—Å Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ø–∞–ø–∫—É banned, –µ—Å–ª–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–Ω–µ
                        working_with_accounts(account_folder=f"user_settings/accounts/{folders}/{file[0]}.session",
                                              new_account_folder=f"user_settings/accounts/banned/{file[0]}.session")
                    similarity_ratio_en: int = fuzz.ratio(f"{message.message}",
                                                          "I‚Äôm very sorry that you had to contact me. Unfortunately, "
                                                          "some account_actions can trigger a harsh response from our "
                                                          "anti-spam systems. If you think your account was limited by "
                                                          "mistake, you can submit a complaint to our moderators. While "
                                                          "the account is limited, you will not be able to send messages "
                                                          "to people who do not have your number in their phone contacts "
                                                          "or add them to groups and channels. Of course, when people "
                                                          "contact you first, you can always reply to them.")
                    if similarity_ratio_en >= 97:
                        logger.info('‚õî –ê–∫–∫–∞—É–Ω—Ç –≤ –±–∞–Ω–µ')
                        await client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, —á—Ç–æ –±—ã session —Ñ–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
                        logger.error(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ SpamBot. {file[0]}: {message.message}")
                        # –ü–µ—Ä–µ–Ω–æ—Å Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ø–∞–ø–∫—É banned, –µ—Å–ª–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–Ω–µ
                        logger.info(file[0])
                        working_with_accounts(account_folder=f"user_settings/accounts/{folders}/{file[0]}.session",
                                              new_account_folder=f"user_settings/accounts/banned/{file[0]}.session")
                    logger.error(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ SpamBot. {file[0]}: {message.message}")
            except YouBlockedUserError:
                continue  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ software_database.db –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
            except AttributeError as e:
                logger.error(e)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
                continue  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ software_database.db –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
            except AuthKeyUnregisteredError as e:
                logger.error(e)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥

